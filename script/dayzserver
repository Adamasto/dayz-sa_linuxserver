#############################################
# enter your steam username that owns DayZ! #
steamusername=changeusername
#############################################
### THIS IS WORK IN PROGRESS!
### DayZ Standalone linuxserver script
### This script uses Wine, Xvfb, Tmux
#############################################

if [ "${ansi}" != "off" ]; then
        # echo colors
        default="\e[0m"
        red="\e[31m"
        green="\e[32m"
        yellow="\e[33m"
        lightyellow="\e[93m"
        blue="\e[34m"
        lightblue="\e[94m"
        magenta="\e[35m"
        cyan="\e[36m"
        # carriage return & erase to end of line
        creeol="\r\033[K"
fi

fn_checkroot_dayz(){
	if [ "$(whoami)" == "root" ]; then
	  printf "[ ${red}FAIL${default} ] ${yellow}Do NOT run this script as root!\n"
	  printf "\tSwitch to the dayz user!${default}\n"
	  exit 1
	fi
}

fn_checktmux(){
	if [ -n "${TMUX}" ]; then
		printf "[ ${red}FAIL${default} ] The Script creates a tmux session when starting the server.\n"
		printf "\tIt is not possible to run a tmux session inside another tmux session\n"
		exit 1
	fi
}

fn_checkscreen(){
	if [ -n "${STY}" ]; then
		printf "[ ${red}FAIL${default} ] The Script creates a tmux session when starting the server.\n"
		printf "\tIt is not possible to run a tmux session inside screen session\n"
		exit 1
	fi
}

version=1
export WINEARCH=win64
export WINEPREFIX=~/.wine64

fn_status_dayz(){
	dayzstatus=$(tmux list-sessions -F dayzserver 2> /dev/null | grep -Ecx dayzserver)
}

fn_fstartfix_dayz(){
	printf "[${cyan} INFO ${default}] The first start of the server may freeze! Have to kill processes!\n         Please start the server again with ${green}./start_dayz.sh${default}\n"
	sleep 4
	rm .dayzlockfile
	killall -u dayz
}

fn_start_dayz(){
	fn_status_dayz
	if [ ! -d ".wine64" ]; then
		firststart=1
	fi
	if [ "${dayzstatus}" == "1" ]; then
		printf "[ ${yellow}DayZ${default} ] Server already running.\n"
		exit 1
	else
		printf "[${green} DayZ ${default}] Starting server...\n"
		tmux new-session -d -x 23 -y 80 -s dayzserver xvfb-run --auto-servernum --server-args='-screen 0 640x480x24:32' wine ~/serverfiles/DayZServer_x64.exe -config=serverDZ.cfg -port=2302 -freezecheck
		date > .dayzlockfile
	fi
	if [ "${firststart}" == "1" ]; then
		fn_fstartfix_dayz
	fi
}

fn_stop_dayz(){
	fn_status_dayz
	if [ "${dayzstatus}" == "1" ]; then
		printf "[ ${magenta}...${default} ] Stopping Server graceful."
		# waits up to 15 seconds giving the server time to shutdown gracefuly
		for seconds in {1..15}; do
			fn_status_dayz
			if [ "${dayzstatus}" == "0" ]; then
				printf "\r[ ${green}OK${default} ] Stopping Server graceful.\n"
				rm .dayzlockfile
				break
			fi
			sleep 1
			printf "\r[ ${magenta}...${default} ] Stopping Server graceful: ${seconds} seconds"
			tmux send-keys C-c -t dayzserver > /dev/null 2>&1
		done
		fn_status_dayz
		if [ "${dayzstatus}" != "0" ]; then
			printf "\n[ ${red}FAIL${default} ] Stopping Server graceful failed. Sending Killall.\n"
			sleep 2
			rm .dayzlockfile
			killall -u dayz
		fi
	else
		printf "[ ${yellow}DayZ${default} ] Server not running.\n"
	fi
}

fn_restart_dayz(){
	fn_stop_dayz
	sleep 5
	fn_start_dayz
}

#fn_monitor_dayz(){
#}

#fn_testalert_dayz(){
#}

fn_console_dayz(){
	tmux a -t dayzserver
}

fn_checkusername_dayz(){
	if [ "${steamusername}" == "changeusername" ]; then
		printf "[${yellow} INFO ${default}] ${yellow}No Username for Steam is set. Please Enter your Username for Steam that owns Dayz!${default}\n"
		sleep 4
		nano dayzserver
		exit 1
	fi
}

fn_install_dayz(){
	fn_checkusername_dayz
	if [ ! -d "steamcmd" ]; then
		mkdir -v steamcmd
		curl -sqL "https://steamcdn-a.akamaihd.net/client/installer/steamcmd_linux.tar.gz" | tar zxvf - -C steamcmd
	else
		printf "[${yellow} INFO ${default}] Steamcmd already installed\n"
	fi

	if [ ! -d "serverfiles" ]; then
		mkdir -v serverfiles
		fn_update_dayz
	else
		printf "[${yellow} INFO ${default}] A server is already installed.\n"
	fi
}

fn_update_dayz(){
	fn_status_dayz
	if [ "${dayzstatus}" == "0" ]; then
		fn_checkusername_dayz
		~/steamcmd/steamcmd.sh +login "${steamusername}" +@sSteamCmdForcePlatformType windows +force_install_dir ~/serverfiles +app_update 223350 +quit
	else
		serverwasrunning=1
		fn_stop_dayz
		fn_update_dayz
	fi
	if [ "${serverwasrunning}" == "1" ]; then
		fn_start_dayz
	fi
}

fn_validate_dayz(){
	fn_status_dayz
	if [ "${dayzstatus}" == "0" ]; then
		fn_checkusername_dayz
		~/steamcmd/steamcmd.sh +login "${steamusername}" +@sSteamCmdForcePlatformType windows +force_install_dir ~/serverfiles +app_update 223350 validate +quit
	else
		serverwasrunning=1
		fn_stop_dayz
		fn_validate_dayz
	fi
	if [ "${serverwasrunning}" == "1" ]; then
		fn_start_dayz
	fi
}

fn_backup_dayz(){
	fn_status_dayz
	if [ "${dayzstatus}" == "0" ]; then
		if [ ! -d "backup" ]; then
			mkdir -v backup
		fi
		printf "[ ${yellow}DayZ${default} ] Creating backup of Missionfolder\n"
		tar -cf ~/backup/dayz_missionbackup-$(date +%d-%m-%Y).tar ~/serverfiles/mpmissions/*
	else
		serverwasrunning=1
		fn_stop_dayz
		fn_backup_dayz
	fi
	if [ "${serverwasrunning}" == "1" ]; then
		fn_start_dayz
	fi
}

fn_wipe_dayz(){
	printf "[${red} DayZ ${default}] Wiping Players and reset Central Economy state...\n"
	rm ~/serverfiles/mpmissions/dayzOffline.chernarusplus/storage_1/players.db 2> /dev/null
	rm ~/serverfiles/mpmissions/dayzOffline.chernarusplus/storage_1/data/* 2> /dev/null
}

fn_updatescript_dayz(){
	checkversion=$(curl -s https://raw.githubusercontent.com/thelastnoc/dayz-sa_linuxserver/master/script/version)
	if [ ${checkversion} -gt ${version} ]; then
		wget -qN https://raw.githubusercontent.com/thelastnoc/dayz-sa_linuxserver/master/script/dayzserver --show-progress
		chmod u+x dayzserver
	else
		printf "No update\n"
	fi
}

cmd_start=( "st;start" "fn_start_dayz" "Start the server." )
cmd_stop=( "sp;stop" "fn_stop_dayz" "Stop the server." )
cmd_restart=( "r;restart" "fn_restart_dayz" "Restart the server.")
cmd_monitor=( "m;monitor" "fn_monitor_dayz" "Check server status and restart if crashed." )
cmd_test_alert=( "ta;test-alert" "fn_testalert_dayz" "Send a test alert." )
cmd_console=( "c;console" "fn_console_dayz" "Access server console." )
cmd_updatescript=( "us;update-script" "fn_updatescript_dayz" "Updates this script." )
cmd_install=( "i;install" "fn_install_dayz" "Install steamcmd and DayZ Server-Files." )
cmd_update=( "u;update" "fn_update_dayz" "Check and apply any server updates." )
cmd_validate=( "v;validate" "fn_validate_dayz" "Validate server files with SteamCMD." )
cmd_backup=( "b;backup" "fn_backup_dayz" "Create backup archives of the server." )
cmd_wipe=( "wi;wipe" "fn_wipe_dayz" "Wipe your server data." )

### Set specific opt here ###
currentopt=( "${cmd_start[@]}" "${cmd_stop[@]}" "${cmd_restart[@]}" "${cmd_monitor[@]}" "${cmd_test_alert[@]}" )
currentopt+=( "${cmd_console[@]}" "${cmd_updatescript[@]}" "${cmd_install[@]}" "${cmd_update[@]}" "${cmd_validate[@]}" "${cmd_backup[@]}" "${cmd_wipe[@]}" )

### Build list of available commands
optcommands=()
index="0"
for ((index="0"; index < ${#currentopt[@]}; index+=3)); do
	cmdamount="$(echo "${currentopt[index]}" | awk -F ';' '{ print NF }')"
	for ((cmdindex=1; cmdindex <= ${cmdamount}; cmdindex++)); do
		optcommands+=( "$(echo "${currentopt[index]}" | awk -F ';' -v x=${cmdindex} '{ print $x }')" )
	done
done

# Shows LinuxGSM usage
fn_opt_usage(){
        echo -e ""
        echo "DayZ 0.63 - Linux Game Server"
	printf "Usage:${lightblue} $0 [option]${default}\n"
        echo -e ""
        echo -e "${lightyellow}Commands${default}"
        # Display available commands
        index="0"
        {
        for ((index="0"; index < ${#currentopt[@]}; index+=3)); do
                # Hide developer commands
                if [ "${currentopt[index+2]}" != "DEVCOMMAND" ]; then
                        echo -e "${cyan}$(echo "${currentopt[index]}" | awk -F ';' '{ print $2 }')\t${default}$(echo "${currentopt[index]}" | awk -F ';' '{ print $1 }')\t|${currentopt[index+2]}"
                fi
        done
        } | column -s $'\t' -t
        exit 1
}

# start functions
fn_checkroot_dayz
fn_checktmux
fn_checkscreen

getopt=$1
if [ ! -d "serverfiles" ] || [ ! -d "steamcmd" ]; then
	printf "[ ${yellow} INFO ${default} ] No installed steamcmd and/or serverfiles found!\n"
	printf "\nFirst run:\t ${cyan} ./dayzserver install ${default}\n"
	exit
else
	### Check if user commands exist and run corresponding scripts, or display script usage
	if [ -z "${getopt}" ]; then
		fn_opt_usage
	fi
fi

# Command exists
for i in "${optcommands[@]}"; do
	if [ "${i}" == "${getopt}" ] ; then
		# Seek and run command
		index="0"
		for ((index="0"; index < ${#currentopt[@]}; index+=3)); do
			currcmdamount="$(echo "${currentopt[index]}" | awk -F ';' '{ print NF }')"
			for ((currcmdindex=1; currcmdindex <= ${currcmdamount}; currcmdindex++)); do
				if [ "$(echo "${currentopt[index]}" | awk -F ';' -v x=${currcmdindex} '{ print $x }')" == "${getopt}" ]; then
					# Run command
					eval "${currentopt[index+1]}"
                                        exit 1
					break
				fi
			done
		done
	fi
done

# If we're executing this, it means command was not found
echo -e "${red}Unknown command${default}: $0 ${getopt}"
